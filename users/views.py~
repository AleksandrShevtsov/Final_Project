from datetime import datetime

from django.contrib.auth import authenticate
from django.http import HttpResponseRedirect
from django.middleware.csrf import get_token
from django.urls import reverse
from django.views import View
from django_filters import OrderingFilter
from django_filters.rest_framework import DjangoFilterBackend
from rest_framework import status
from rest_framework.generics import CreateAPIView, ListAPIView
from rest_framework.permissions import IsAuthenticated, AllowAny
from rest_framework.request import Request
from rest_framework.response import Response
from rest_framework.views import APIView
from rest_framework_simplejwt.tokens import RefreshToken
from .models import User
from users.permissions import IsAdminUser
from users.serializers import RegisterUserSerializer, UserListSerializer, UserSerializer


class UserListGenericView(ListAPIView):
    # permission_classes = [IsAuthenticated, IsAdminUser]
    serializer_class = UserListSerializer
    queryset = User.objects.all()
    filter_backends = [DjangoFilterBackend, OrderingFilter]
    filterset_fields = ['username', 'email']  # Замените на ваши поля фильтрации
    ordering_fields = ['username', 'email']  # Замените на ваши поля сортировки
    # ordering = ['username']  # Поле по умолчанию для сортировки

    def list(self, request, *args, **kwargs):
        users = self.get_queryset()
        if not users.exists():
            return Response(data=[], status=status.HTTP_204_NO_CONTENT)
        serializer = self.get_serializer(users, many=True)
        return Response(serializer.data, status=status.HTTP_200_OK)

class RegisterUserGenericView(CreateAPIView):
    serializer_class = RegisterUserSerializer
    permission_classes = [AllowAny]

    def create(self, request, *args, **kwargs):
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        user = serializer.save()
        response = Response(serializer.data, status=status.HTTP_201_CREATED)
        set_jwt_cookies(response, user)
        return response

class LoginView(APIView):
    permission_classes = [AllowAny]

    def post(self, request, *args, **kwargs):
        user = authenticate(request, username=request.data.get('username'), password=request.data.get('password'))
        if user:
            response = Response(status=status.HTTP_200_OK)
            set_jwt_cookies(response, user)
            return response
        return Response({"detail": "Invalid credentials"}, status=status.HTTP_401_UNAUTHORIZED)


class LogoutView(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request, *args, **kwargs):
        # Выход пользователя при GET запросе
        return self.logout_user(request)

    def post(self, request, *args, **kwargs):
        # Выход пользователя при POST запросе
        return self.logout_user(request)

    def logout_user(self, request):
        # Очистка куков и завершение сессии пользователя
        request.session.flush()  # Полностью очищаем сессию пользователя

        # Создаем ответ для клиента
        response = Response({'message': 'Successfully logged out'}, status=status.HTTP_200_OK)

        # Удаляем токены из куков
        response.delete_cookie('access_token')
        response.delete_cookie('refresh_token')

        return response


class AutoLogoutView(View):
    def get(self, request, *args, **kwargs):
        # Создаем POST-запрос для выхода
        response = HttpResponseRedirect(reverse('logout'))
        # Добавляем CSRF-токен к запросу
        csrf_token = get_token(request)
        response.set_cookie('csrftoken', csrf_token)
        response.method = 'POST'
        return response


class ProtectedDataView(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request):
        return Response({"message": "Hello, authenticated user!", "user": request.user.username})

def set_jwt_cookies(response, user):
    refresh_token = RefreshToken.for_user(user)
    access_token = refresh_token.access_token
    access_expiry = datetime.utcfromtimestamp(access_token['exp'])
    refresh_expiry = datetime.utcfromtimestamp(refresh_token['exp'])
    response.set_cookie(key='access_token', value=str(access_token), httponly=True, secure=False, samesite='Lax', expires=access_expiry)
    response.set_cookie(key='refresh_token', value=str(refresh_token), httponly=True, secure=False, samesite='Lax', expires=refresh_expiry)
